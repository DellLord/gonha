#!/usr/bin/env python
from PyQt5 import QtWidgets
import gonha
from pathlib import Path
import os
import sys
from colr import color
import pkg_resources
import re
import json
import psutil
from PyInquirer import prompt, print_json


class Config:

    def __init__(self):
        # Config file
        self.cfgFile = f'{Path.home()}/.config/gonha/config.json'
        self.globalJSON = dict()
        self.aboutdialogFile = pkg_resources.resource_filename('gonha', 'aboutdialog.ui')
        self.version = self.getVersion()
        print(color(':: ', fore=11), color(f'Gonha {self.version}', fore=14, back=0), color(' ::', fore=11))
        print('Starting...')
        if not os.path.isfile(self.cfgFile):
            print(color('Config file not found in : ', fore=9), color(f'{self.cfgFile}', fore=11))
            print(color('Starting Wizard...', fore=14))
            print('')

            # Position Question
            positionQuestions = [
                {
                    'type': 'list',
                    'name': 'position',
                    'message': 'What position do you want on the screen?',
                    'choices': [
                        'Top Left',
                        'Top Right',
                    ],
                }
            ]
            positionResponse = prompt(positionQuestions)
            self.updateConfig(positionResponse)

            # Date Format Question
            dateFormatQuestions = [
                {
                    'type': 'list',
                    'name': 'dateFormat',
                    'message': 'Select time format',
                    'choices': [
                        '12 hours',
                        '24 hours',
                    ]
                }
            ]
            dateFormatResponse = prompt(dateFormatQuestions)
            self.updateConfig(dateFormatResponse)

            # Temperature Question
            sensors = psutil.sensors_temperatures()
            tempUserChoices = []
            for i, key in enumerate(sensors):
                tempUserChoices.append(
                    '{} - [{}] current temp: {:.2f}Â°'.format(i, key, float(sensors[key][i].current))
                )

            # Temperature Questions
            tempQuestions = [
                {
                    'type': 'list',
                    'name': 'temp',
                    'message': 'Select what is temperature sensor you want gonha to show',
                    'choices': tempUserChoices,
                    'filter': lambda val: tempUserChoices.index(val)
                }
            ]
            tempResponse = prompt(tempQuestions)
            self.updateConfig(tempResponse)

            partitionsChoices = []
            # Filesystem sections
            for partition in psutil.disk_partitions():
                partitionsChoices.append(
                    {
                        'name': 'device: [{}] mountpoint: [{}] fstype: {}'.format(partition.device,
                                                                                  partition.mountpoint,
                                                                                  partition.fstype),
                        'value': partition.mountpoint
                    }
                )

            partitionQuestions = [
                {
                    'type': 'checkbox',
                    'name': 'filesystems',
                    'message': 'Select which partitions you want to display',
                    'choices': partitionsChoices,
                }
            ]
            partitionsResponse = prompt(partitionQuestions)
            self.updateConfig(partitionsResponse)

            # Interface Name
            ifaceChoices = []
            for net_if_addr in psutil.net_if_addrs():
                ifaceChoices.append('{}'.format(net_if_addr))

            ifaceQuestions = [
                {
                    'type': 'list',
                    'name': 'iface',
                    'message': 'Select the network interface to donwload e upload rate stats.',
                    'choices': ifaceChoices
                }
            ]
            ifaceResponse = prompt(ifaceQuestions)
            self.updateConfig(ifaceResponse)

            # Write json global
            # print(self.globalJSON)
            self.writeConfig()
            # ----------------------------------------
            sys.exit()

    def writeConfig(self):
        if not os.path.isdir(os.path.dirname(self.cfgFile)):
            os.makedirs(os.path.dirname(self.cfgFile))

        # Serializing json
        json_object = json.dumps(self.globalJSON, indent=4)
        with open(self.cfgFile, 'w') as outfile:
            outfile.write(json_object)

    def updateConfig(self, data):
        self.globalJSON.update(data)

    def getVersion(self):
        pattern = "([0-9]+.[0-9]+.[0-9]+)"
        with open(self.aboutdialogFile, 'r') as f:
            for line in f.readlines():
                if re.search(pattern, line):
                    return re.search(pattern, line).group()


if __name__ == '__main__':
    # app = QtWidgets.QApplication(sys.argv)
    Config()
    app = gonha.app
    window = gonha.MainWindow()
    app.exec_()
